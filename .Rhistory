...)
is_package_installed('sceasy')
is_package_installed('reticulate')
is_python_package_installed(envname = envname, packages.vec = c('scipy'))
# the matrix will be already transposed! cells x features
adata <- sceasy::convertFormat(sce,
from = "sce",
to = "anndata",
main_layer = main_layer,
drop_single_values = FALSE,
...)
source("~/Documents/ruler/R/sce2adata_sparse.R", echo=TRUE)
sce2adata_sparse(sce)
source("~/Documents/ruler/R/sce2adata_sparse.R", echo=TRUE)
sce2adata_sparse(sce = )
sce2adata_sparse(sce = sce)
reticulate::use_virtualenv(envname = envname)
reticulate::use_virtualenv(envname)
source("~/Documents/ruler/R/sce2adata_sparse.R", echo=TRUE)
sce2adata_sparse(sce)
source("~/Documents/ruler/R/sce2adata_sparse.R", echo=TRUE)
sce2adata_sparse(sce)
packages.vec = c('metacells',
'numpy',
'anndata',
'pandas',
'scanpy',
'scipy')
packages.vec
source("~/Documents/ruler/R/partition_metacell.R", echo=TRUE)
partition_metacell(matrix)
scipy <- reticulate::import('scipy')
scipy$sparse$csc$isspmatrix_csc(matrix)
scipy <- reticulate::import('scipy')
packages.vec = c('metacells',
'numpy',
'anndata',
'pandas',
'scanpy',
'scipy')
is_python_package_installed(packages.vec = packages.vec, envname = envname)
#.rs.restartR() in case there are problems with the loading metacells
# enforcing the use of the correct environment
reticulate::use_virtualenv(envname)
mc    <- reticulate::import('metacells')
ad    <- reticulate::import('anndata')
np    <- reticulate::import('numpy')
scipy <- reticulate::import('scipy')
envname
reticulate::virtualenv_remove(envname = 'r-metacells')
Y
message('--- Checking packages ---')
is_package_installed('reticulate')
packages.vec = c('metacells',
'numpy',
'anndata',
'pandas',
'scanpy',
'scipy')
is_python_package_installed(packages.vec = packages.vec, envname = envname)
envname
is_python_package_installed
envname
is_python_package_installed(packages.vec = packages.vec, envname = envname)
reticulate::virtualenv_list()
reticulate::virtualenv_remove(envname = 'r-metacell')
Y
packages.vec = c('metacells',
'numpy',
'anndata',
'pandas',
'scanpy',
'scipy')
is_python_package_installed(packages.vec = packages.vec, envname = envname)
#.rs.restartR() in case there are problems with the loading metacells
# enforcing the use of the correct environment
reticulate::use_virtualenv(envname)
mc    <- reticulate::import('metacells')
ad    <- reticulate::import('anndata')
np    <- reticulate::import('numpy')
scipy <- reticulate::import('scipy')
# enforcing the variables type to avoid crashes in python
if(!is.null(min_umi)) min_umi <- as.integer(min_umi)
is_package_installed('reticulate')
mc    <- reticulate::import('metacells')
ad    <- reticulate::import('anndata')
np    <- reticulate::import('numpy')
scipy <- reticulate::import('scipy')
envname
#.rs.restartR() in case there are problems with the loading metacells
# enforcing the use of the correct environment
reticulate::use_virtualenv(envname)
is_python_package_installed(packages.vec = packages.vec, envname = envname)
is_python_package_installed
is_python_package_installed <- function(packages.vec, envname='r-reticulate'){
### Description ###
# Checks if you have installed a python package in a given virtual env
# by default it checks for r-reticulate since it is suite for a SLURM HPC
# If the package is not present, it directly tries to install itâ€¦
# example usage
# is_python_package_installed(c('numpy', 'pandas'))
is_package_installed('reticulate')
msg.chr <- paste0('Installing in',envname ,' virtual environment packages : \n')
# retrieving the specific of the virtual|conda environment
if(!(envname %in% reticulate::virtualenv_list())){
message('Defining a new virtual environment called : ', envname)
reticulate::virtualenv_create(envname = envname)
}
env_packages.table <- reticulate::py_list_packages(envname = envname)
env_packages.vec <- env_packages.table[, 'package']
installed.boolvec <- packages.vec %in% env_packages.vec
if(any(!installed.boolvec)){
packages2install.vec <-  packages.vec[!installed.boolvec]
message(paste0(msg.chr, packages2install.vec))
reticulate::virtualenv_install(envname = envname,
packages = packages2install.vec)
}
else(message('All python packages are installed'))
}
source("~/Documents/ruler/R/partition_metacell.R", echo=TRUE)
reticulate::virtualenv_remove(envname = 'r-metacells')
reticulate::virtualenv_remove(envname = 'r-metacell')
Y
load('data/sce.rda')
partition_metacell(sce, quality_filters = F)
partition_metacell(sce, quality_filters = F)
sce
matrix
matrix <- counts(sce)
matrix
partition_metacell(matrix, quality_filters = F)
mc    <- reticulate::import('metacells')
ad    <- reticulate::import('anndata')
np    <- reticulate::import('numpy')
scipy <- reticulate::import('scipy')
# Conversion form CSC to CSR keeping it sparse!
if(scipy$sparse$csc$isspmatrix_csc(matrix)){
matrix <- scipy$sparse$csr_matrix(matrix)
}
matrix
data.h5ad <- ad$AnnData(t(matrix), dtype = 'float32')
data.h5ad$obs_names <- colnames(matrix)
matrix
colnames(matrix)
data.h5ad <- ad$AnnData(t(matrix), dtype = 'float32')
if(!is.null(colnames(matrix))){
data.h5ad$obs_names <- colnames(matrix)}
if(!is.null(rownames(matrix))){
data.h5ad$var_names <- rownames(matrix)}
# enforcing unique feature names
data.h5ad$var_names_make_unique()
mc$ut$top_level(data.h5ad)
mc$ut$set_name(data.h5ad, name = assay_name)
target_metacell_size=100
envname='r-metacells'
assay_name='full_run'
quality_filters=TRUE
min_umi=800
max_umi=20000
excluded_gene_names=c('XIST, MALAT1')
excluded_gene_patterns=c('MT-.*')
max_excluded_gene_fraction=0.25
source("~/Documents/ruler/R/partition_metacell.R", echo=TRUE)
lateral_gene_patterns=c("RP[LS].*")
noisy_gene_names=c()
noisy_gene_patterns=c()
num_parallel_piles=NULL
return_model=FALSE
seed=42
message('--- Checking packages ---')
is_package_installed('reticulate')
packages.vec = c('metacells',
'numpy',
'anndata',
'pandas',
'scanpy',
'scipy')
is_python_package_installed(packages.vec = packages.vec, envname = envname)
#.rs.restartR() in case there are problems with the loading metacells
# enforcing the use of the correct environment
reticulate::use_virtualenv(envname)
mc    <- reticulate::import('metacells')
ad    <- reticulate::import('anndata')
np    <- reticulate::import('numpy')
scipy <- reticulate::import('scipy')
# enforcing the variables type to avoid crashes in python
if(!is.null(min_umi)) min_umi <- as.integer(min_umi)
if(!is.null(max_umi)) max_umi <- as.integer(max_umi)
if(!is.null(max_excluded_gene_fraction)){
max_excluded_gene_fraction <- as.double(max_excluded_gene_fraction)}
target_metacell_size <- as.integer(target_metacell_size)
seed <-  as.integer(seed)
# Conversion form CSC to CSR keeping it sparse!
if(scipy$sparse$csc$isspmatrix_csc(matrix)){
matrix <- scipy$sparse$csr_matrix(matrix)
}
data.h5ad <- ad$AnnData(t(matrix), dtype = 'float32')
if(!is.null(colnames(matrix))){
data.h5ad$obs_names <- colnames(matrix)}
if(!is.null(rownames(matrix))){
data.h5ad$var_names <- rownames(matrix)}
# enforcing unique feature names
data.h5ad$var_names_make_unique()
mc$ut$top_level(data.h5ad)
mc$ut$set_name(data.h5ad, name = assay_name)
if(quality_filters) message('--- Quality Filtering Steps ---')
if(!quality_filters){
min_umi <- NULL
max_umi <- NULL
excluded_gene_names <- NULL
excluded_gene_patterns <- NULL
lateral_gene_name <- NULL
lateral_gene_patterns <- NULL
noisy_gene_names <- NULL
noisy_gene_patterns <- NULL
max_excluded_gene_fraction <- NULL
}
if(is.null(min_umi) & is.null(max_umi)){
message('note : Avoiding filtering cells by total UMI counts')
}
if(is.null(excluded_gene_names) & is.null(excluded_gene_patterns)){
message('note : Considering all gene names and patterns')
}
# it also excludes highly variant genes which are also uncorrelated
# with any other gene
if(quality_filters) message('--- 1. excluding genes ---')
mc$pl$exclude_genes(data.h5ad,
excluded_gene_names = excluded_gene_names,
excluded_gene_patterns = excluded_gene_patterns,
random_seed = seed);
if(quality_filters) message('--- 2. excluding cells ----')
mc$tl$compute_excluded_gene_umis(data.h5ad) # for each cell
mc$pl$exclude_cells(data.h5ad,
properly_sampled_min_cell_total = min_umi,
properly_sampled_max_cell_total = max_umi,
properly_sampled_max_excluded_genes_fraction = max_excluded_gene_fraction)
if(quality_filters) message('--- 3. cleaning the data ---')
data.h5ad <- mc$pl$extract_clean_data(data.h5ad, name = paste0(assay_name, '_clean'))
if(quality_filters) message('--- 4. marking lateral genes ---')
mc$pl$mark_lateral_genes(data.h5ad,
lateral_gene_names = lateral_gene_name,
lateral_gene_patterns = lateral_gene_patterns,
op = 'set') # op = 'add' adds gene names
lateral_gene_name=c(# Cell-cycle
"AURKA", "MCM3", "MCM4",
"MCM7", "MKI67", "PCNA",
"RRM2", "SMC4", "TPX2",
# Stress
"FOS", "HSP90AB1", "TXN")
lateral_gene_names=c(# Cell-cycle
"AURKA", "MCM3", "MCM4",
"MCM7", "MKI67", "PCNA",
"RRM2", "SMC4", "TPX2",
# Stress
"FOS", "HSP90AB1", "TXN")
if(is.null(min_umi) & is.null(max_umi)){
message('note : Avoiding filtering cells by total UMI counts')
}
if(is.null(excluded_gene_names) & is.null(excluded_gene_patterns)){
message('note : Considering all gene names and patterns')
}
# it also excludes highly variant genes which are also uncorrelated
# with any other gene
if(quality_filters) message('--- 1. excluding genes ---')
mc$pl$exclude_genes(data.h5ad,
excluded_gene_names = excluded_gene_names,
excluded_gene_patterns = excluded_gene_patterns,
random_seed = seed);
if(quality_filters) message('--- 2. excluding cells ----')
mc$tl$compute_excluded_gene_umis(data.h5ad) # for each cell
mc$pl$exclude_cells(data.h5ad,
properly_sampled_min_cell_total = min_umi,
properly_sampled_max_cell_total = max_umi,
properly_sampled_max_excluded_genes_fraction = max_excluded_gene_fraction)
if(quality_filters) message('--- 3. cleaning the data ---')
data.h5ad <- mc$pl$extract_clean_data(data.h5ad, name = paste0(assay_name, '_clean'))
if(quality_filters) message('--- 4. marking lateral genes ---')
mc$pl$mark_lateral_genes(data.h5ad,
lateral_gene_names = lateral_gene_names,
lateral_gene_patterns = lateral_gene_patterns,
op = 'set') # op = 'add' adds gene names
if(quality_filters) message('--- 5. marking noisy genes ---')
mc$pl$mark_noisy_genes(data.h5ad,
noisy_gene_names = noisy_gene_names,
noisy_gene_patterns = noisy_gene_patterns,
op = 'set')
if(is.null(num_parallel_piles)){
max_parallel_piles <- mc$pl$guess_max_parallel_piles(data.h5ad)
mc$pl$set_max_parallel_piles(max_parallel_piles)
}else{mc$pl$set_max_parallel_piles(num_parallel_piles)
}
message('--- Computing MetaCells ---')
mc$pl$divide_and_conquer_pipeline(data.h5ad,
target_metacell_size = target_metacell_size,
random_seed = seed,
...)
source("~/Documents/ruler/R/partition_metacell.R", echo=TRUE)
partition_metacell(matrix)
data.h5ad
# Conversion form CSC to CSR keeping it sparse!
if(scipy$sparse$csc$isspmatrix_csc(matrix)){
matrix <- scipy$sparse$csr_matrix(matrix)
}
data.h5ad <- ad$AnnData(t(matrix), dtype = 'float32')
if(!is.null(colnames(matrix))){
data.h5ad$obs_names <- colnames(matrix)}
if(!is.null(rownames(matrix))){
data.h5ad$var_names <- rownames(matrix)}
# enforcing unique feature names
data.h5ad$var_names_make_unique()
mc$ut$top_level(data.h5ad)
mc$ut$set_name(data.h5ad, name = assay_name)
if(quality_filters) message('--- Quality Filtering Steps ---')
if(!quality_filters){
min_umi <- NULL
max_umi <- NULL
excluded_gene_names <- NULL
excluded_gene_patterns <- NULL
lateral_gene_name <- NULL
lateral_gene_patterns <- NULL
noisy_gene_names <- NULL
noisy_gene_patterns <- NULL
max_excluded_gene_fraction <- NULL
}
if(is.null(min_umi) & is.null(max_umi)){
message('note : Avoiding filtering cells by total UMI counts')
}
if(is.null(excluded_gene_names) & is.null(excluded_gene_patterns)){
message('note : Considering all gene names and patterns')
}
# it also excludes highly variant genes which are also uncorrelated
# with any other gene
if(quality_filters) message('--- 1. excluding genes ---')
mc$pl$exclude_genes(data.h5ad,
excluded_gene_names = excluded_gene_names,
excluded_gene_patterns = excluded_gene_patterns,
random_seed = seed);
if(quality_filters) message('--- 2. excluding cells ----')
mc$tl$compute_excluded_gene_umis(data.h5ad) # for each cell
mc$pl$exclude_cells(data.h5ad,
properly_sampled_min_cell_total = min_umi,
properly_sampled_max_cell_total = max_umi,
properly_sampled_max_excluded_genes_fraction = max_excluded_gene_fraction)
if(quality_filters) message('--- 3. cleaning the data ---')
data.h5ad <- mc$pl$extract_clean_data(data.h5ad, name = paste0(assay_name, '_clean'))
if(quality_filters) message('--- 4. marking lateral genes ---')
mc$pl$mark_lateral_genes(data.h5ad,
lateral_gene_names = lateral_gene_names,
lateral_gene_patterns = lateral_gene_patterns,
op = 'set') # op = 'add' adds gene names
data.h5ad
source("~/Documents/ruler/R/partition_metacell.R", echo=TRUE)
load('data/sce.rda')
matrix <- counts(sce)
partition_metacell(matrix)
reticulate::virtualenv_create('r-try')
reticulate::virtualenv_install(envname = 'r-try', 'metacells')
packageVersion('reticulate')
reticulate::use_virtualenv('r-decomp')
reticulate::py_available()
reticulate::py_config()
reticulate::use_virtualenv('r-metacells')
reticulate::use_virtualenv('r-metacells')
reticulate::py_config()
?reticulate::virtualenv_create()
reticulate::py_list_packages()
reticulate::py_list_packages()['requirement']
pv <- c('anndata==0.10.5.post1',
'array_api_compat==1.4.1',
'clarabel==0.6.0',
'contourpy==1.2.0',
'cvxpy==1.4.2',
'cycler==0.12.1',
'ecos==2.0.12',
'fastcluster==1.2.6',
'fonttools==4.47.2',
'h5py==3.10.0',
'igraph==0.11.3',
'importlib-metadata==7.0.1',
'joblib==1.3.2',
'kiwisolver==1.4.5',
'llvmlite==0.41.1',
'matplotlib==3.8.2',
'metacells==0.9.4',
'natsort==8.4.0',
'networkx==3.2.1',
'numba==0.58.1',
'numpy==1.26.3',
'osqp==0.6.3',
'packaging==23.2',
'pandas==2.2.0',
'patsy==0.5.6',
'pillow==10.2.0',
'psutil==5.9.8',
'pybind11==2.11.1',
'pynndescent==0.5.11',
'pyparsing==3.1.1',
'python-dateutil==2.8.2',
'python-igraph==0.11.3',
'pytz==2023.4',
'PyYAML==6.0.1',
'qdldl==0.1.7.post0',
'scanpy==1.9.8',
'scikit-learn==1.4.0',
'scipy==1.12.0',
'scs==3.2.4.post1',
'seaborn==0.13.2',
'session-info==1.0.0',
'six==1.16.0',
'statsmodels==0.14.1',
'stdlib-list==0.10.0',
'texttable==1.7.0',
'threadpoolctl==3.2.0',
'tqdm==4.66.1',
'tzdata==2023.4',
'umap-learn==0.5.5',
'zipp==3.17.0')
source("~/Documents/ruler/R/D4C.R", echo=TRUE)
is_python_package_installed(envname = 'r-try', packages.vec = pv)
reticulate::py_config()
reticulate::virtualenv_list()
reticulate::virtualenv_remove(envname = 'kernel_archetypal_analysis')
Y
reticulate::virtualenv_remove(envname = 'r-try')
Y
reticulate::virtualenv_remove(envname = 'kernel-aa')
Y
reticulate::virtualenv_remove(envname = 'r-metacells')
Y
reticulate::virtualenv_remove(envname = 'r-scanpy')
Y
reticulate::virtualenv_remove(envname = 'reticulate_PCHA')
Y
reticulate::virtualenv_remove(envname = 'r-cnmf')
Y
reticulate::virtualenv_remove(envname = 'r-nimfa')
Y
reticulate::virtualenv_remove(envname = 'r-scib')
Y
reticulate::virtualenv_list()
py_discover_config()
reticulate::py_discover_config()
is_python_package_installed
is_python_package_installed <- function(packages.vec, envname='r-reticulate'){
### Description ###
# Checks if you have installed a python package in a given virtual env
# by default it checks for r-reticulate since it is suite for a SLURM HPC
# If the package is not present, it directly tries to install itâ€¦
# example usage
# is_python_package_installed(c('numpy', 'pandas'))
is_package_installed('reticulate')
msg.chr <- paste0('Installing in',envname ,' virtual environment packages : \n')
# retrieving the specific of the virtual|conda environment
if(!(envname %in% reticulate::virtualenv_list())){
message('Defining a new virtual environment called : ', envname)
reticulate::virtualenv_create(envname = envname, python = '3.11')
}
env_packages.table <- reticulate::py_list_packages(envname = envname)
env_packages.vec <- env_packages.table[, 'package']
installed.boolvec <- packages.vec %in% env_packages.vec
if(any(!installed.boolvec)){
packages2install.vec <-  packages.vec[!installed.boolvec]
message(paste0(msg.chr, packages2install.vec))
reticulate::virtualenv_install(envname = envname,
packages = packages2install.vec)
}
else(message('All python packages are installed'))
}
package_warning <- function(package_x){
### Description ###
# Prints a warning message to install a package
# example usage
# package_warning('ruler')
message('Please install ',
package_x,
' to your home directory using install.packes(\'',
package_x,
'\', lib = \'</home/user.name/R>\')')
}
packages.vec = c('metacells',
'numpy',
'anndata',
'pandas',
'scanpy',
'scipy')
envname='r-metacells'
is_python_package_installed(packages.vec = packages.vec, envname = envname)
#.rs.restartR() in case there are problems with the loading metacells
# enforcing the use of the correct environment
reticulate::use_virtualenv(envname)
mc    <- reticulate::import('metacells')
mc
source("~/Documents/ruler/R/partition_metacell.R", echo=TRUE)
partition_metacell(matrix = matrix(1, 1, 1, 1), envname = 'r-try')
reticulate::py_last_error()
rnorm(100000)
as.matrix(rnorm(100000), ncol = 500)
M <- as.matrix(rnorm(100000), ncol = 500)
source("~/Documents/ruler/R/partition_metacell.R", echo=TRUE)
reticulate::use_python()
reticulate::use_python('3.11')
ACTIONet::runACTIONet
?.run.ACTIONMR.ace
.run.ACTIONMR.ace
.run.ACTIONMR.ace()
ACTIONet::.run.ACTIONMR.ace
??.run.ACTIONMR.ace
ACTIONet::.run.ACTIONMR.ace
ACTIONet:::.run.ACTIONMR.ace
ACTIONet:::decomp.ACTIONMR
ACTIONet:::run_ACTION
??bapply
