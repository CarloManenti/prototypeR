partition_graph(sce)
partition_graph(sce, method = 'louvain')
partition_graph(sce, method = 'louvain', result_name = 'louvain')
source("~/Documents/ruler/R/partition_metacells.R", echo=TRUE)
sce
partition_metacells(sce)
source("~/Documents/ruler/R/partition_metacells.R", echo=TRUE)
partition_metacells(sce)
partition_metacells(sce, target_number_of_metacells = 10)
partition_metacells(sce, target_number_of_metacells = 5, min_umi = 5)
partition_metacells(sce, target_number_of_metacells = 100, min_umi = 5)
sce <- partition_metacells(sce, target_number_of_metacells = 100, min_umi = 5)
sce <- partition_metacells(sce, target_number_of_metacells = 100, min_umi = 5)
metadata(sce)[['metacells']]
dim(metadata(sce)[['metacells']])
sce <- partition_metacells(sce, target_number_of_metacells = 10, min_umi = 5)
dim(metadata(sce)[['metacells']])
warnings <- reticulate::import(warnings)
warnings <- reticulate::import('warnings')
messages <- reticulate::import('messages')
messages <- reticulate::import('message')
warnings <- reticulate::import('warnigns')
scrattch.hicat::cpm
source("~/Documents/ruler/R/partition_recursive.R", echo=TRUE)
source("~/Documents/ruler/R/partition_recursive.R", echo=TRUE)
source("~/Documents/ruler/R/partition_recursive.R", echo=TRUE)
source("~/Documents/ruler/R/partition_recursive.R", echo=TRUE)
partition_recursive(sce, de.score.th = 70, n_iter = 5)
partition_recursive(sce, de.score.th = 70, n_iter = 5, q.diff.th = 0.1)
partition_recursive(sce, de.score.th = 70, n_iter = 5, q.diff.th = 0.2)
library(Matrix)
partition_recursive(sce, de.score.th = 70, n_iter = 5, q.diff.th = 0.2)
sce
gc()
library(devtools)
getwd()
setwd('..')
getwd()
current.node = as.package("ruler")
load_all(current.node$path)
document(current.node)
document(current.node)
document(current.node)
document(current.node)
devtools::document(current.node)
devtools::document(current.node)
devtools::document(current.node)
devtools::document(current.node)
devtools::document(current.node)
??metadata
SingleCellExperiment::metadata()
SummarizedExperiment::metadata()
??t.test
stats::t.test()
??s
??as
SingleCellExperiment::reducedDim
SingleCellExperiment::reducedDimNames
??metadata
SingleCellExperiment::reducedDimNames
SingleCellExperiment::counts
??pdf
base::pdf()
sce
load('data/sce.rda')
raster::metadata(sce)
raster::metadata(sce)
metadata(sce)
SingleCellExperiment::metadata(sce)
library(SingleCellExperiment)
metadata(sce)
ACTIONet::metadata(sce)
S4Vectors::metadata(sce)
library(ACTIONet)
metadata(sce)
source("~/Documents/ruler/R/return_model.R", echo=TRUE)
grDevices::dev.off()
blues9
??blues9
grDevices::blues9
SingleCellExperiment::reducedDimNames()
SingleCellExperiment::reducedDimNames()
SingleCellExperiment::reducedDimNames(sce)
ACTIONetExperiment::colMaps
ACTIONetExperiment::rowMaps()
grDevices::as
grDevices::as()
SingleCellExperiment::colData
SingleCellExperiment::counts()
sce
load('data/sce.rda')
sce
library(devtools)
devtools::load_all('../ruler')
devtools::load_all('../ruler')
rm(list = c("return_model"))`
rm(list = c("return_model"))
devtools::load_all('../ruler')
sce
sce <- decomp_sparse_pca(sce, 50)
sce
save(sce, file='sce.rda', compress='xz')
sce
scran::getTopHVGs(sce)
save(sce, file='data/sce.rda', compress='xz')
cell_capture(sce, sce$cluster, 'pca')
center_and_scale(logcounts(sce), center = TRUE, scale = TRUE)
sce
logcounts(sce)
center_and_scale(logcounts(sce), center = TRUE, scale = TRUE)
scale(logcounts(sce))
t(logocunts(sce))
t(logcounts(sce))
center_and_scale(logcounts(sce), center = TRUE, scale = TRUE)
base::t(logcounts(sce))
Matrix::t(logcounts(sce))
devtools::load_all('../ruler')
center_and_scale(logcounts(sce), center = TRUE, scale = TRUE)
result_name <- change_default_name('pca', reducedDimNames(sce))
check_dir('PhD')
decomp_aa(sce, 5, reduced_representation = 'pca')
devtools::load_all('../ruler')
decomp_aa(sce, 5, reduced_representation = 'pca')
decomp_aa(sce = sce, n_components = 5, reduced_representation = 'pca')
decomp_cnmf(sce = sce, n_components = 2, levels = 3 , num_iterations = 2)
devtools::load_all('../ruler')
decomp_cnmf(sce = sce, n_components = 2, levels = 3 , num_iterations = 2)
decomp_cnmf(sce = sce, n_components = 2, levels = 3 , num_iterations = 2, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 2, levels = 3 , num_iterations = 3, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 2, levels = 3 , num_iterations = 4, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 5, levels = 5 , num_iterations = 2, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 3, levels = 5 , num_iterations = 5, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 3, levels = c(2, 5) , num_iterations = 5, density_threshold = 1)
devtools::load_all('../ruler')
decomp_cnmf(sce = sce, n_components = 3, levels = c(2, 5) , num_iterations = 5, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 3, levels = c(2, 5) , num_iterations = 10, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 3, levels = c(3, 5) , num_iterations = 10, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 6, levels = c(5, 6) , num_iterations = 10, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 10, levels = c(9, 11) , num_iterations = 10, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 10, levels = c(9, 11) , num_iterations = 10, density_threshold = 1)
devtools::load_all('../ruler')
decomp_cnmf(sce = sce, n_components = 10, levels = c(9, 11) , num_iterations = 10, density_threshold = 1)
devtools::load_all('../ruler')
decomp_cnmf(sce = sce, n_components = 10, levels = c(9, 11) , num_iterations = 10, density_threshold = 1)
# initializing the cNMF object
check_dir(output_dir)
devtools::load_all('../ruler')
decomp_cnmf(sce = sce, n_components = 10, levels = c(9, 11) , num_iterations = 10, density_threshold = 1)
output_dir
devtools::load_all('../ruler')
decomp_cnmf(sce = sce, n_components = 10, levels = c(9, 11) , num_iterations = 10, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 10, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
devtools::load_all('../ruler')
decomp_dense_nmf(sce, n_components = 3)
decomp_dense_nmf(sce, n_components = 3, method = 'bayesian')
decomp_dense_nmf(sce, n_components = 3, method = 'separable')
decomp_dense_nmf(sce, n_components = 3, method = 'default')
devtools::load_all('../ruler')
decomp_dense_nmf(sce, n_components = 3, method = 'default')
devtools::load_all('../ruler')
decomp_dense_pca(sce, n_components = 50)
sce
decomp_ica(sce, n_components = 6, assay = logcounts)
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
??assay
library(SingleCellExperiment)
SummarizedExperiment::assay(sce, 'logcounts')
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
assay(sce)
assays(sce)
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
library(RangedSummarizedExperiment)
library(RangedSummarizedExperiment)
SummarizedExperiment::assay(sce)
SummarizedExperiment::assay(sce)[['logcounts']]
SummarizedExperiment::assay(sce)['logcounts']
names(SummarizedExperiment::assay(sce))
SummarizedExperiment::assay(sce)
SummarizedExperiment::assays(sce)
SummarizedExperiment::assays(sce)[['logcounts']]
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
source("~/Documents/ruler/R/decomp_ica.R", echo=TRUE)
devtools::load_all('../ruler')
rm(list = c("decomp_ica"))
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
is_package_installed('SingleCellExperiment')
decomp_ica(sce, n_components = 6, assay = logcounts)
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
SummarizedExperiment::assay(sce)
SummarizedExperiment::assay(sce, 'logcounts')
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
sce
class(sce)
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = logcounts)
decomp_ica(sce, n_components = 6, assay = 'logcounts')
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = 'logcounts')
devtools::load_all('../ruler')
decomp_ica(sce, n_components = 6, assay = 'logcounts')
decomp_kaa(sce, n_components = 5, n_highly_variable_genes = 250, n_pcs = 10, n_waypoint_eigs = 3, verbose = TRUE, plots = TRUE)
devtools::load_all('../ruler')
decomp_kaa(sce, n_components = 5, n_highly_variable_genes = 250, n_pcs = 10, n_waypoint_eigs = 3, verbose = TRUE, plots = TRUE)
devtools::load_all('../ruler')
decomp_kaa(sce, n_components = 5, n_highly_variable_genes = 250, n_pcs = 10, n_waypoint_eigs = 3, verbose = TRUE, plots = TRUE)
devtools::load_all('../ruler')
decomp_kaa(sce, n_components = 5, n_highly_variable_genes = 250, n_pcs = 10, n_waypoint_eigs = 3, verbose = TRUE, plots = TRUE)
devtools::load_all('../ruler')
devtools::load_all('../ruler')
prior_knowledge = list('0' = list('gene_set_1' = list("KLHL17",
"CCNL2",
"ATAD3B",
"NOL9"),
'gene_set_2' = list("CENPS-CORT",
"FBXO2",
"KLHL21")),
'1' = list('gene_set_1' = list("NPPA",
"FHAD1",
"FBXO42",
"ATP13A2"),
'gene_set_3' = list("PADI2",
"AHDC1",
"PPP1R8",
"LAPTM5")),
# set of genes which will be evaluated for all the
# cells in dataâ€¦
'global' = list('gene_set_4' = list("AZIN2",
"ZSCAN20",
"ZC3H12A")))
decomp_kb(sce,
metadata_key = 'is.doublet',
prior_knowledge = prior_knowledge,
n_hvgs = NULL,
num_epochs = 100)
decomp_mraa(sce, n_components = 14, verbose = T)
decomp_sparse_pca(sce, n_components = 50)
decomp_sparse_pca(sce, n_components = 50)
decomp_va(sce, 5, accelerator = 'cpu', verbose = T, max_epochs = 100)
decomp_va(sce, 5, accelerator = 'cpu', verbose = T, max_epochs = 10)
hard_assignment(reducedDim(sce, 'pca'))
Ignore_Warnings(TRUE)
ignore_warnings(TRUE)
ignore_warnings(TRUE)
ignore_warnings(TRUE, verbose = TRUE)
is_MPS_avaliable(envname = 'r-decomp', verbose = TRUE)
is_package_installed('NotToBeFoundPackage')
is_python_package_installed(packages.vec = 'numpy', envname = 'r-decomp')
list_to_assignment_matrix(input.list)
input.list = c('a', 'a', 'b', 'c')
list_to_assignment_matrix(input.list, list_to_assignment_matrix(input.list))
list_to_assignment_matrix(input.list, c('a', 'a', 'b', 'c'))
list_to_assignment_matrix(c('a', 'a', 'b', 'c'))
list_to_assignment_matrix(input.list = c('a', 'a', 'b', 'c'))
package_warning('Matrix')
package_warning('NotToBeFoundPackage')
package_warning('NotToBeFoundPackage')
partition_graph(sce, resolution = 0.4)
devtools::load_all('../ruler')
partition_graph(sce, resolution = 0.4)
source("~/Documents/ruler/R/partition_recursive.R", echo=TRUE)
devtools::load_all('../ruler')
rm(list = c("partition_recursive"))
devtools::load_all('../ruler')
partition_recursive(sce, de.score.th = 70, n_iter = 100, q.diff.th = 0.2)
gc()
partition_recursive(sce[, 1 : 100], de.score.th = 50, n_iter = 10, q.diff.th = 0.2)
partition_recursive(sce, de.score.th = 50, n_iter = 10, q.diff.th = 0.2)
partition_recursive(sce, de.score.th = 10, n_iter = 10, q.diff.th = 0.2)
partition_recursive(sce, de.score.th = 100, n_iter = 10, q.diff.th = 0.2)
partition_recursive(sce, de.score.th = 100, n_iter = 20, q.diff.th = 0.2)
partition_recursive(sce, de.score.th = 100, n_iter = 20, q.diff.th = 0.7)
partition_recursive(sce, de.score.th = 10, n_iter = 20, q.diff.th = 0.7)
partition_recursive(sce, de.score.th = 10, n_iter = 20, mc.cores = 2, q.diff.th = 0.7)
warnings()
partition_recursive(sce, de.score.th = 10, n_iter = 20, mc.cores = 2, q.diff.th = 0.7, min.cells = 40)
partition_recursive(sce, de.score.th = 10, n_iter = 20, mc.cores = 2, q.diff.th = 0.7, padj.th = 0.7, lfc.th = 0.1)
partition_recursive(sce, de.score.th = 10, n_iter = 20, mc.cores = 2, q.diff.th = 0.7, padj.th = 0.7, lfc.th = 0.1, low.th = 0.1)
partition_recursive(sce, de.score.th = 10, n_iter = 20, mc.cores = 2, q.diff.th = 0.7, padj.th = 0.7, lfc.th = 0.1, low.th = 0.1, q2.th = 0.1)
warnings()
partition_recursive(sce, de.score.th = 40, n_iter = 5, mc.cores = 2, q.diff.th = 0.7, padj.th = 0.5, lfc.th = 0.5, low.th = 0.1)
partition_recursive(sce, de.score.th = 40, n_iter = 5, mc.cores = 2, q.diff.th = 0.7, padj.th = 0.5, lfc.th = 0.5, low.th = 0.1, verbose = T)
partition_recursive(sce, de.score.th = 40, n_iter = 5, mc.cores = 2, q.diff.th = 0.1, padj.th = 0.1, lfc.th = 0.1, low.th = 0.1, verbose = T)
warnings()
partition_recursive(sce, de.score.th = 40, n_iter = 5, mc.cores = 2, q.diff.th = 0.1, padj.th = 0.1, lfc.th = 0.1, low.th = 0.1, verbose = T)
model <- decomp_aa(sce, n_components = 3, return_model = TRUE)
model
plot_aas_feature(model[[2]], 'total_var', 'Archetypes Variability')
model[[2]]
return_model(sce = c(1, 2 ,3), model = c('a', 'b', 'c'), return_model = TRUE)
return_model(sce = c(1, 2 ,3), model = c('a', 'b', 'c'), return_model = TRUE, other = (TRUE, FALSE))
return_model(sce = c(1, 2 ,3), model = c('a', 'b', 'c'), return_model = TRUE, other = (TRUE, FALSE))
return_model(sce = c(1, 2 ,3), model = c('a', 'b', 'c'), return_model = TRUE, other = c(TRUE, FALSE))
ComplexHeatmap::Heatmap(logcounts(sce)[1 : 10, 1 : 10])
ComplexHeatmap::Heatmap(seq(1, 10, length.out = 10))
ComplexHeatmap::Heatmap(seq(1, 10, length.out = 10), col = blues9)
save_pdf(plot = ComplexHeatmap::Heatmap(seq(1, 10, length.out = 10), col = blues9), file_name = '~/Documents/plot.pdf')
sce2adata_sparse(sce)
select_aas(sce, seq(5, 7))
devtools::load_all('../ruler')
select_aas(sce, seq(5, 7))
select_aas(sce, interval_of_k = seq(3, 4), boostrap_n = 2)
invisible(elect_aas(sce, interval_of_k = seq(3, 4), boostrap_n = 2))
invisible(select_aas(sce, interval_of_k = seq(3, 4), boostrap_n = 2))
select_aas(sce, interval_of_k = seq(3, 4), boostrap_n = 2, reduced_representation = 'pca')
select_aas(sce, interval_of_k = seq(3, 4), boostrap_n = 2, reduced_representation = 'pca', verbose = T)
split_sparse(sparse_matrix = counts(sce), split_vector = clusters)
devtools::load_all('../ruler')
split_sparse(sparse_matrix = counts(sce), split_vector = clusters)
??unique
split_sparse(sparse_matrix = counts(sce), split_vector = sce$clusters)
split_sparse(sparse_matrix = counts(sce), split_vector = sce$cluster)
length(sce
)
sce
ncol(sce)
rnomr(2 * ncol(sce))
rnorm(2 * ncol(sce))
matrix(rnorm(2 * ncol(sce)), ncol = ncol(sce))
dim(matrix(rnorm(2 * ncol(sce)), ncol = ncol(sce)))
t(matrix(rnorm(2 * ncol(sce)), ncol = ncol(sce)))
store_H(sce, h.matrix = t(matrix(rnorm(2 * ncol(sce)), ncol = ncol(sce))), result_name = 'aa', latent_name = 'AA')
store_W(sce, w.matrix = matrix(rnorm(2 * nrow(sce)), nrow = nrow(sce)), result_name = 'aa', latent_name = 'AA')
irlba::prcomp_irlba
gc()
gc()
library(devtools)
getwd()
setwd('../')
getwd()
current.node = as.package("ruler")
load_all(current.node$path)
document(current.node)
R CMD build myPackage
gc()
document(current.node)
library(devtools)
load_all(current.node$path)
current.node = as.package("ruler")
load_all(current.node$path)
document(current.node)
Matrix::t(matrix(stats::rnorm(2 * nrow(sce)), nrow = nrow(sce)))
gc()
library(devtools)
current.node = as.package("ruler")
load_all(current.node$path)
document(current.node)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
is_python_package_installed(envname = 'r-decomp',
packages.vec = c('cnmf', 'scanpy'))
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
reticulate::use_virtualenv('r-decomp')
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
reticulate::py_list_packages('r-decomp')
reticulate::import('cnmf')
reticulate::py_config()
reticulate::use_virtualenv('r-decomp')
reticulate::py_config()
is_python_package_installed(envname = envname,
packages.vec = c('cnmf', 'scanpy'), forced = TRUE)
is_python_package_installed(envname = 'r-decomp',
packages.vec = c('cnmf', 'scanpy'), forced = TRUE)
is_python_package_installed(envname = 'r-decomp',
packages.vec = c('cnmf', 'scanpy'), forced = TRUE)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
devtools::load_all('ruler')
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
reticulate::virtualenv_list()
reticulate::virtualenv_remove(envname = 'r-partition')
Y
reticulate::virtualenv_remove(envname = 'r-parition')
Y
reticulate::virtualenv_remove(envname = 'r-decomp')
Y
gc()
gc()
library(devtools)
load_all('ruler')
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
reticulate::use_virtualenv('r-decomp')
reticulate::py_config()
reticulate::use_virtualenv('r-decomp')
reticulate::py_config()
reticulate::use_virtualenv('r-decomp', required = TRUE)
reticulate::py_config()
reticulate::use_virtualenv('r-decomp', required = TRUE)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
reticulate::use_virtualenv('r-decomp')
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
devtools::load_all('ruler')
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 3, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 3, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 3, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 9, levels = seq(9, 11) , num_iterations = 2, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 9, levels = seq(9, 11) , num_iterations = 3, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 9, levels = seq(9, 11) , num_iterations = 3, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 5, density_threshold = 1)
source("~/Documents/ruler/R/decomp_cnmf.R", echo=TRUE)
decomp_cnmf(sce = sce, n_components = 10, levels = seq(9, 11) , num_iterations = 5, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 3, levels = 3 , num_iterations = 50, density_threshold = 1)
decomp_cnmf(sce = sce, n_components = 3, levels = 3 , num_iterations = 30, density_threshold = 1)
gc()
reticulate::py_config()
gc()
library(devtools)
current.node = as.package("ruler")
load_all(current.node$path)
document(current.node)
decomp_aa(sce = sce, n_components = 5, reduced_representation = 'pca')
decomp_aa(sce = sce, n_components = 5, reduced_representation = 'pca')
decomp_aa(sce)
sce
decomp_aa(sce, 5)
decomp_aa(sce, 5)
load_all('ruler/')
decomp_aa(sce, 5)
load_all('ruler/')
decomp_aa(sce, 5)
decomp_aa(sce, 5, verbose = T)
SummarizedExperiment::assay(sce)
load_all('ruler/')
decomp_aa(sce, 5, verbose = T)
assay = 'logcounts'
SummarizedExperiment::assay(sce, assay)
load_all('ruler/')
decomp_aa(sce, 5, verbose = T)
gc()
library(devtools)
source('../ruler_support_files/document_ruler.R')
getwd()
source('../ruler_support_files/document_ruler.R')
sce
decomp_aa(sce, 5)
reticulate::py_list_packages('r-decomp')
source('../ruler_support_files/document_ruler.R')
source('/Users/carlomanenti/Documents/ruler_support_files/ruler_support_files/document_ruler.R')
source('/Users/carlomanenti/Documents/ruler_support_files/document_ruler.R')
decomp_aa(sce, 5)
source('/Users/carlomanenti/Documents/ruler_support_files/document_ruler.R')
decomp_aa(sce, 5)
decomp_cnmf(sce, n = 3, 3)
decomp_cnmf(sce, n_components = 3, 3)
decomp_cnmf(sce, n_components = 3, 3, num_iterations = 50)
decomp_dense_nmf(sce, 4)
library(SingleCellExperiment)
decomp_dense_nmf(sce, 4)
decomp_aa(sce, 5)
SingleCellExperiment::assay()
source('/Users/carlomanenti/Documents/ruler_support_files/document_ruler.R')
decomp_aa(sce, 5)
decomp_dense_pca(sce, 4)
decomp_ica(sce, 3)
decomp_kaa(sce, 3)
decomp_kaa(sce, n_components = 3)
decomp_kaa(sce, n_components = 10)
decomp_kaa(sce, n_components = 14)
decomp_kaa(sce, n_components = 5, n_highly_variable_genes = 250, n_pcs = 10, n_waypoint_eigs = 3, verbose = TRUE, plots = TRUE)
decomp_kb(sce)
decomp_sparse_pca(sce, 5)
decomp_va(sce, 4)
partition_graph(sce)
partition_metacells(sce, 3)
partition_metacells(sce, 3)
partition_metacells(sce, 2)
reticulate::use_virtualenv('r-partition')
partition_metacells(sce, 2)
partition_metacells(sce, 2)
devtools::load_all('ruler/')
partition_metacells(sce, 2)
partition_metacells(sce, 2)
partition_metacells(sce, 10)
devtools::load_all('ruler/')
partition_metacells(sce, 10)
partition_metacells(sce, 100)
partition_metacells(sce, target_number_of_metacells = 2, min_umi = 5)
source('/Users/carlomanenti/Documents/ruler_support_files/document_ruler.R')
is(1)
is(1, 'numeric')
source('/Users/carlomanenti/Documents/ruler_support_files/document_ruler.R')
??is
source('/Users/carlomanenti/Documents/ruler_support_files/document_ruler.R')
install.packages('roxygen2')
install.packages("roxygen2")
source('/Users/carlomanenti/Documents/ruler_support_files/document_ruler.R')
gc()
library(ruler)
library(BiocCheck)
BiocCheck::BiocCheck('ruler')
rlang::last_trace()
devtools::install_version("dbplyr", version = "2.3.4")
BiocCheck::BiocCheck('ruler')
library(BiocCheck)
BiocCheck::BiocCheck('ruler')
